function B = specular_model(varargin)
    % INPUT: ["parameters", "dimensions"]. OUTPUT: manifold matrix
    if isempty(varargin)
        run_unitary_test();
        return;
    end

    [parameters, dimensions] = parse_input_parameters(varargin, ["parameters", "dimensions"]);

    num_dim = numel(dimensions);
    num_paths = numel(parameters)/num_dim;
    
    a_mu = @(mu, M) exp(-1i*(-(M-1)/2:(M-1)/2)*mu).';
    B_i = @(i) arrayfun(@(p) a_mu(parameters(p), dimensions(i)) , 1:num_paths, 'UniformOutput', false);

    B_1 = B_i(1); B_1 = [B_1{:}]; % frequency aperture
    B_2 = B_i(2); B_2 = [B_2{:}]; % spatial aperture
    B_3 = B_i(3); B_3 = [B_3{:}]; % spatial aperture
       
    B = kr(B_3, kr(B_2, B_1));
end

function run_unitary_test()

    % physical parameters
    delays = [10e-9; 100e-9];
    doas = (pi/180)*[45;60;10;100];
    physical_parameters = [delays; doas];

    mu = parameter_mapping(physical_parameters, "physical");

    B = specular_model(mu, [4;4;4]);

end